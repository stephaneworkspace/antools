cmake_minimum_required(VERSION 3.22)
project(antools)

set(CMAKE_CXX_STANDARD 20)

IF (WITH_DEBUG_SYMBOLS)
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -g")
endif()

#if (DEFINED PLATFORM)
#    include(toolchains/ios.cmake)
#endif()

option(WITH_IOS "Option description" OFF)
option(WITH_MACOS "Option description" ON)

#IF (WITH_IOS)
#    SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -arch arm64")
#    SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -arch arm64")
#    set(CMAKE_CXX_FLAGS "-fobjc-abi-version=2 -fobjc-arc ${CMAKE_CXX_FLAGS}")
#endif()
#add_subdirectory(other_cmake/base64)
#add_subdirectory(other_cmake/simple_svg)
#add_subdirectory(other_cmake/json-3.11.2)
add_subdirectory(other_cmake/Swe)
add_subdirectory(other_cmake/SweInterface)

IF (WITH_IOS)
    add_library(antools STATIC src/antools.cpp include/antools.h)
    target_link_libraries(antools ${CMAKE_SOURCE_DIR}/rust/lib/generic/librantools.a)
#   target_link_libraries (antools swe)
endif()
IF (WITH_MACOS)
    include_directories(include)
    file(GLOB SOURCES "src/*.cpp")
    file(GLOB SOURCES "src/base64/*.h")
    add_executable(antools exe/main.cpp include/antools.h src/antools.cpp)
    target_link_libraries(antools ${CMAKE_SOURCE_DIR}/rust/lib/librantools.a)
#   target_link_libraries (antools swe)
endif()

#target_link_libraries (antools nlohmann_json::nlohmann_json)
target_link_libraries (antools swe)
target_link_libraries (antools SweInterface)
